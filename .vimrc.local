    "Customer{
    "
        set relativenumber
        set cursorcolumn
        let g:tex_flavor = 'latex'
        set clipboard=unnamed "设置系统剪贴板
        set nospell "取消拼写检查
        set encoding=utf-8
        set fileencodings=ucs-bom,utf-8,cp936,gbk,big5,latin1
        "color wombat
        set tags+=/usr/include/c++/5/stdcpp.tags
        let OmniCpp_DefaultNamespaces = ["_GLIBCXX_STD"]

        ""80字符限制
        "显示81位置竖线
        set colorcolumn=81
        "设置80字符自动换行
        set textwidth=80
        "中文
        set fo+=mB

        " 自动更新文件的最后更新时间
        function! AutoUpdateTheLastUpdateInfo()
            let s:original_pos = getpos(".")
            let s:regexp = '^\s*\(%\+\|\/\**\|\*\+\|\#\+\|\"\+\|\/\/\)\s*@last\s\+\(update\|change\):'
            let s:lu = search(s:regexp)
            if s:lu != 0
                let s:update_str = matchstr(getline(s:lu), s:regexp)
                call setline(s:lu, s:update_str . " " . strftime("%Y-%m-%d %H:%M:%S"))
                call setpos(".", s:original_pos)
            endif
        endfunction
        autocmd BufWritePost *.{py,sh,h,c,cpp,java,m},*vimrc call AutoUpdateTheLastUpdateInfo()
    "}

    "YouCompleteMe{
    "
    if count(g:spf13_bundle_groups, 'youcompleteme')
        set completeopt=longest,menu  "让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
        autocmd InsertLeave * if pumvisible() != 0|pclose|endif "离开插入模式后自动关闭预览窗口
        inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>" "回车即选中当前项
        "上下左右键的行为 会显示其他信息
        inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
        inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
        inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
        inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"
        " 跳转到定义处
        nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
        nnoremap <F6> :YcmForceCompileAndDiagnostics<CR> "force recomile with syntastic
        " nnoremap <leader>lo :lopen<CR> "open locationlist
        " nnoremap <leader>lc :lclose<CR> "close locationlist
        inoremap <leader><leader> <C-x><C-o>

        "设置全局配置文件路径
        let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'
        " 不显示开启vim时检查ycm_extra_conf文件的信息
        let g:ycm_confirm_extra_conf=0
        " 开启基于tag的补全，可以在这之后添加需要的标签路径
        let g:ycm_collect_identifiers_from_tags_files=1
        "注释和字符串中的文字也会被收入补全
        let g:ycm_collect_identifiers_from_comments_and_strings = 0
        " 输入第2个字符开始补全
        let g:ycm_min_num_of_chars_for_completion=2
        " 禁止缓存匹配项,每次都重新生成匹配项
        let g:ycm_cache_omnifunc=0
        " 开启语义补全
        let g:ycm_seed_identifiers_with_syntax=1
        "在注释输入中也能补全
        let g:ycm_complete_in_comments = 1
        "在字符串输入中也能补全
        let g:ycm_complete_in_strings = 1
        "
        let g:ycm_use_ultisnips_completer = 0
        " 设置在下面几种格式的文件上屏蔽ycm
        let g:ycm_filetype_blacklist = {
              \ 'tagbar' : 1,
              \ 'nerdtree' : 1,
              \}
        ""youcompleteme  默认tab  s-tab 和 ultisnips 冲突
        "let g:ycm_key_list_select_completion = ['<Tab>']
        "let g:ycm_key_list_previous_completion = ['<S-Tab>']
        "" 修改对C函数的补全快捷键，默认是CTRL + space，修改为ALT + ;
        let g:ycm_key_invoke_completion = '<M-;>'
        let g:ycm_show_diagnostics_ui = 0

        "YCM补全菜单配色
        highlight Pmenu ctermfg=24 ctermbg=255 guifg=#005f87 guibg=#eee8d5
        highlight PmenuSel ctermfg=148 ctermbg=22 guifg=#afd700 guibg=#106900
    endif
    "}

    "" SirVer/ultisnips 代码片断
    "Ultisnips{
    "
        "" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
        let g:UltiSnipsSnippetDirectories=["UltiSnips_Yeoman/"]
        let g:UltiSnipsSnippetDir=$HOME.'/.vim/UltiSnips_Yeoman/'
        let g:UltiSnipsExpandTrigger="<C-k>"
        let g:UltiSnipsJumpForwardTrigger="<C-j>"
        let g:UltiSnipsJumpBackwardTrigger="<C-k>"
        "let g:UltiSnipsListSnippets="<C-j>"
        "let g:UltiSnipsUsePythonVersion=2

        "" 解决ultisnips和ycm tab冲突，如果不使用下面的办法解决可以参考
        "" begin
        let g:ycm_key_list_select_completion=['<C-n>', '<Down>']
        let g:ycm_key_list_previous_completion=['<C-p>', '<Up>']
        let g:UltiSnipsExpandTrigger="<Tab>"
        let g:UltiSnipsJumpForwardTrigger="<Tab>"
        let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"
        "" end
    "}
    "Syntastic{
        "General
        let g:syntastic_error_symbol='✗'
        let g:syntastic_warning_symbol='⚠'
        let g:syntastic_check_on_open=1
        let g:syntastic_check_on_wq=1
        let g:syntastic_enable_highlighting=1
        let g:syntastic_always_populate_loc_list=1
        let g:syntastic_auto_loc_list=0
        let g:syntastic_loc_list_height=5
        function! ToggleErrors()
            let old_last_winnr=winnr('$')
            lclose
            if old_last_winnr == winnr('$')
                Errors
            endif
        endfunction
        nnoremap <leader>s :call ToggleErrors()<CR>
        nnoremap <leader>sn :lnext<CR>
        nnoremap <leader>sp :lprevious<CR>

        "Support Python Javascript html Matlab
        let g:syntastic_python_checkers=['pyflakes']
        let g:syntastic_javascript_checkers=['jsl','Jshint']
        let g:syntastic_html_checkers=['tidy','Jshint']
        let g:syntastic_matlab_checkers=['mlint']
        let g:syntastic_java_checkers=['CheckStyle','javac']

        "Highlight
        highlight SyntasticErrorSign guifg=white guibg=black

        "Support Cpp
        let g:syntastic_c_include_dirs = ['/usr/include/']
        let g:syntastic_cpp_include_dirs = ['/usr/include/c++/5/']
        let g:syntastic_cpp_remove_include_errors = 1
        let g:syntastic_cpp_check_header = 1
        let g:syntastic_cpp_checkers = ['clang_check']
        let g:syntastic_cpp_compiler = 'clang++'
        let g:syntastic_cpp_compiler_options = ' -std=c++11 -stdlib=libstdc++'
        let g:syntastic_enable_balloons = 1"whether to show balloons
        let g:syntastic_clang_check_config_file = '~/.vim/.syntastic_clang_check_config_file'

        "Enable Debug
        "let g:syntastic_debug=1
    "}

    "kien/rainbow_parentheses{
        let g:rbpt_colorpairs = [
            \ ['brown',       'RoyalBlue3'],
            \ ['Darkblue',    'SeaGreen3'],
            \ ['darkgray',    'DarkOrchid3'],
            \ ['darkgreen',   'firebrick3'],
            \ ['darkcyan',    'RoyalBlue3'],
            \ ['darkred',     'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['brown',       'firebrick3'],
            \ ['gray',        'RoyalBlue3'],
            \ ['black',       'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['Darkblue',    'firebrick3'],
            \ ['darkgreen',   'RoyalBlue3'],
            \ ['darkcyan',    'SeaGreen3'],
            \ ['darkred',     'DarkOrchid3'],
            \ ['red',         'firebrick3'],
            \ ]
        let g:rbpt_max = 16
        let g:rbpt_loadcmd_toggle = 0
        au VimEnter * RainbowParenthesesToggle
        au Syntax * RainbowParenthesesLoadRound
        au Syntax * RainbowParenthesesLoadSquare
        au Syntax * RainbowParenthesesLoadBraces
    "}
    "Konfekt/FastFold{
        nmap zuz <Plug>(FastFoldUpdate)
        let g:fastfold_savehook = 0
        let g:fastfold_fold_command_suffixes = ['x','X','a','A','o','O','c','C']
        let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']
    "}
    " vim-airline {
        " Set airline theme
        let g:airline_theme = 'murmur'
    " }
    "derekwyatt/vim-fswitch{
        nmap <silent> <leader>sw :FSHere<cr>

    "}
"

